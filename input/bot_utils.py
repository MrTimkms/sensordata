import os
import telebot
from config import  TELEGRAM_CONFIG
from telebot import types
import time
# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏
from datetime import datetime
import sqlite3
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TELEGRAM_CONFIG['TOKEN'])
db_path_cloud= os.path.join(os.getcwd(),  '1.2_WeatherData_VS-1_2024-03-20_.db')
def run_bot():
    while True:
        try:
            bot.polling(none_stop=True)
        except Exception as e:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ 10 –º–∏–Ω")
            print(datetime.now())
            time.sleep(60*10)
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.InlineKeyboardMarkup()
    get_data_button = types.InlineKeyboardButton(text="üìä –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ë–î", callback_data='getdataBD')
    status_button = types.InlineKeyboardButton(text="üìà –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", callback_data='status')

    markup.row( get_data_button, status_button)
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –¥–∞—Ç—á–∏–∫–æ–≤—ã–π –±–æ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

# –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def handle_query(call):
    command = call.data

    # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ callback_data
    if command == 'condition':
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π /condition
        bot.send_message(call.message.chat.id, "/condition")
    elif command == 'getdataBD':
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π /getdataBD
        bot.send_message(call.message.chat.id, "/getdataBD")
    elif command == 'status':
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π /status
        bot.send_message(call.message.chat.id, "/status")
    elif command == 'relay_st':
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π /relay_st
        bot.send_message(call.message.chat.id, "/relay_st")
    elif command == 'relay_on':
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π /relay_on
        bot.send_message(call.message.chat.id, "/relay_on")
    elif command == 'relay_off':
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π /relay_off
        bot.send_message(call.message.chat.id, "/relay_off")
    elif command == 'ip':
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π /ip
        bot.send_message(call.message.chat.id, "/ip")

@bot.message_handler(commands=['getdataBD'])
def get_data(message):
    database_path = '1.3_SolarData_ExpU.db'
    if os.path.exists(database_path):
        with open(database_path, 'rb') as db_file:
            bot.send_document(message.chat.id, db_file)
    else:
        bot.reply_to(message,
                     "–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª 'solar_data.db' –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
@bot.message_handler(commands=['get_cloud_data'])
def send_cloud_data(message):
    date_text = message.text.split()  # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –±—É–¥–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ /get_cloud_data 2024-03-20
    if len(date_text) > 1:
        date = date_text[1]
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
            datetime.strptime(date, '%Y-%m-%d')
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
            conn = sqlite3.connect(db_path_cloud)
            cursor = conn.cursor()
            cursor.execute("SELECT datetime, clouds FROM screenshots WHERE datetime LIKE ?", (f'{date}%',))
            data = cursor.fetchall()
            conn.close()
            if data:
                response = f"–î–∞–Ω–Ω—ã–µ –æ–±–ª–∞—á–Ω–æ—Å—Ç–∏ –∑–∞ {date}:\n"
                response += "\n".join([f"{datetime.strptime(row[0], '%Y-%m-%d %H:%M:%S').strftime('%H:%M')} - {row[1]}" for row in data])
                bot.reply_to(message, response)
            else:
                bot.reply_to(message, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É.")
        except ValueError:
            bot.reply_to(message, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD.")
    else:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É.")
