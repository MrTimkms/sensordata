import minimalmodbus
import time
import os
import csv
import smtplib
import logging
import telebot
import threading
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
from configurate import SENSOR_TH_CONFIG, SENSOR_PYRANOMETER_CONFIG, Mail_CONFIG, DATA_PATH_Conf, TELEGRAM_CONFIG, ALLOWED_USERS, OPENVPN_CONFIG, REALVNC_CONFIG
from datetime import datetime
from telebot import types

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(filename='program_log.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
last_sent_timestamp = None  # –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö

# –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_PATH = os.path.join(os.getcwd(), DATA_PATH_Conf['DownloadedAttachments'])

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
if not os.path.exists(DATA_PATH):
    os.makedirs(DATA_PATH)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–∞—Ç—á–∏–∫–∞
def configure_sensor(config):
    sensor = minimalmodbus.Instrument(config['port'], config['address'])
    sensor.serial.baudrate = config['baudrate']
    sensor.serial.bytesize = config['bytesize']
    sensor.serial.parity = config['parity']
    sensor.serial.stopbits = config['stopbits']
    sensor.serial.timeout = config['timeout']
    return sensor

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ CSV
def save_data_to_csv(data, file_path):
    with open(file_path, mode='a', newline='') as file:
        writer = csv.writer(file)
        writer.writerow(data)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ —Å –≤–ª–æ–∂–µ–Ω–∏–µ–º –Ω–∞ –ø–æ—á—Ç—É
def send_email(subject, body, attachment_path):
    global last_sent_timestamp
    smtp_server = Mail_CONFIG['smtp_server']
    smtp_port = Mail_CONFIG['smtp_port']
    login = Mail_CONFIG['login']
    password = Mail_CONFIG['password']

    msg = MIMEMultipart()
    msg['From'] = login
    msg['To'] = login  # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ —Å–µ–±–µ
    msg['Subject'] = subject

    msg.attach(MIMEText(body, 'plain'))

    try:
        with open(attachment_path, "rb") as attachment:
            part = MIMEBase('application', 'octet-stream')
            part.set_payload(attachment.read())
            encoders.encode_base64(part)
            part.add_header('Content-Disposition', "attachment; filename= %s" % os.path.basename(attachment_path))
            msg.attach(part)
    except FileNotFoundError:
        error_message = "–í–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤–∫–∞ –±–µ–∑ –Ω–µ–≥–æ."
        logging.warning(error_message)

    try:
        server = smtplib.SMTP_SSL(smtp_server, smtp_port)
        server.login(login, password)
        text = msg.as_string()
        server.sendmail(login, login, text)
        server.quit()
        logging.info("–ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        last_sent_timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    except Exception as e:
        error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞: {str(e)}"
        logging.error(error_message)
sensorTH = configure_sensor(SENSOR_TH_CONFIG)
pyranometer = configure_sensor(SENSOR_PYRANOMETER_CONFIG)
# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å –¥–∞—Ç—á–∏–∫–æ–≤, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –ø–æ—á—Ç—É
def main(sensor_delay):
    global sensorTH, pyranometer
    last_sent_hour = None  # –ß–∞—Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    while True:  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
        try:
            current_hour = datetime.now().hour

            if last_sent_hour is None:
                last_sent_hour = (current_hour - 1) % 24  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ % 24, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —á–∞—Å—É –≤ —Ü–∏–∫–ª–µ 24 —á–∞—Å–∞

            if current_hour != last_sent_hour:  # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —á–∞—Å –Ω–µ —Ä–∞–≤–µ–Ω –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —á–∞—Å—É, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

                temperature = sensorTH.read_register(1, 1)
                humidity = sensorTH.read_register(0, 1)
                solar_radiation = pyranometer.read_register(0, 0)

                logging.info(
                    f"–¢–µ–∫—É—â–∏–π —á–∞—Å: {current_hour}, –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}, –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}, –°–æ–ª–Ω–µ—á–Ω–æ–µ –∏–∑–ª—É—á–µ–Ω–∏–µ: {solar_radiation}")

                file_name = datetime.now().strftime("%Y%m%d_%H.csv")
                file_path = os.path.join(DATA_PATH, file_name)
                save_data_to_csv([timestamp, temperature, humidity, solar_radiation], file_path)

                # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —á–∞—Å –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —á–∞—Å–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –ø–æ—á—Ç—É
                send_email("–î–∞–Ω–Ω—ã–µ —Å –¥–∞—Ç—á–∏–∫–æ–≤", "–í–æ –≤–ª–æ–∂–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã–µ —Å –¥–∞—Ç—á–∏–∫–æ–≤.", file_path)
                last_sent_hour = current_hour

        except Exception as e:
            error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
            logging.error(error_message)

        finally:
            sensorTH.clear_buffers_before_each_transaction = True
            pyranometer.clear_buffers_before_each_transaction = True
            time.sleep(sensor_delay)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TELEGRAM_CONFIG['TOKEN'])

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def create_main_keyboard():
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    command_button = types.KeyboardButton('/commands')
    condition_button = types.KeyboardButton('üìà /condition')
    status_button = types.KeyboardButton('üìä /status')
    getdata_button = types.KeyboardButton('üìÇ /getdata')
    openvpn_button = types.KeyboardButton('üîí /openvpn')
    ip_button = types.KeyboardButton('üåê /ip')
    realvnc_button = types.KeyboardButton('üíª /realvnc')
    keyboard.add(command_button, condition_button, status_button, getdata_button, openvpn_button, ip_button, realvnc_button)
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start'])
def send_welcome(message):
    logging.info(f"Received command: /start or /help from chat ID: {message.chat.id}")
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –¥–∞—Ç—á–∏–∫–æ–≤—ã–π –±–æ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.", reply_markup=create_main_keyboard())

@bot.message_handler(commands=['commands'])
def send_commands(message):
    bot.reply_to(message, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /commands, /condition, /status, /getdata, /openvpn, /ip, /realvnc")

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    threading.Thread(target=main, args=(5,)).start()
    threading.Thread(target=run_bot).start()
