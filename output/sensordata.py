# -*- coding: utf-8 -*-
import minimalmodbus
import time
import os
import csv
import smtplib
import logging
import telebot
import threading
import dateparser
import subprocess
import socket
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
from configurate import SENSOR_TH_CONFIG, SENSOR_PYRANOMETER_CONFIG, Mail_CONFIG, DATA_PATH_Conf, TELEGRAM_CONFIG, ALLOWED_USERS, OPENVPN_CONFIG, REALVNC_CONFIG, NOTIFICATION_CONFIG
from datetime import datetime, timedelta
from telebot import types

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(filename='program_log.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
last_sent_timestamp = None
last_high_temperature_notification_sent = None
last_low_temperature_notification_sent = None

# –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_PATH = os.path.join(os.getcwd(), DATA_PATH_Conf['DownloadedAttachments'])

if not os.path.exists(DATA_PATH):
    os.makedirs(DATA_PATH)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–∞—Ç—á–∏–∫–∞
def configure_sensor(config):
    sensor = minimalmodbus.Instrument(config['port'], config['address'])
    sensor.serial.baudrate = config['baudrate']
    sensor.serial.bytesize = config['bytesize']
    sensor.serial.parity = config['parity']
    sensor.serial.stopbits = config['stopbits']
    sensor.serial.timeout = config['timeout']
    return sensor

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ CSV
def save_data_to_csv(data, file_path):
    with open(file_path, mode='a', newline='') as file:
        writer = csv.writer(file)
        writer.writerow(data)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ —Å –≤–ª–æ–∂–µ–Ω–∏–µ–º –Ω–∞ –ø–æ—á—Ç—É
def send_email(subject, body, attachment_path):
    global last_sent_timestamp
    smtp_server = Mail_CONFIG['smtp_server']
    smtp_port = Mail_CONFIG['smtp_port']
    login = Mail_CONFIG['login']
    password = Mail_CONFIG['password']

    msg = MIMEMultipart()
    msg['From'] = login
    msg['To'] = login
    msg['Subject'] = subject

    msg.attach(MIMEText(body, 'plain'))

    try:
        with open(attachment_path, "rb") as attachment:
            part = MIMEBase('application', 'octet-stream')
            part.set_payload(attachment.read())
            encoders.encode_base64(part)
            part.add_header('Content-Disposition', "attachment; filename= %s" % os.path.basename(attachment_path))
            msg.attach(part)
    except FileNotFoundError:
        error_message = "–í–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤–∫–∞ –±–µ–∑ –Ω–µ–≥–æ."
        logging.warning(error_message)

    try:
        server = smtplib.SMTP_SSL(smtp_server, smtp_port)
        server.login(login, password)
        text = msg.as_string()
        server.sendmail(login, login, text)
        server.quit()
        logging.info("–ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        last_sent_timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    except Exception as e:
        error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞: {str(e)}"
        logging.error(error_message)

sensorTH = configure_sensor(SENSOR_TH_CONFIG)
pyranometer = configure_sensor(SENSOR_PYRANOMETER_CONFIG)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å –¥–∞—Ç—á–∏–∫–æ–≤ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∏ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏
def collect_sensor_data(sensor, sensor_name):
    try:
        value = sensor.read_register(1, 1)
        return value
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å {sensor_name}: {str(e)}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å –¥–∞—Ç—á–∏–∫–∞ —Å–æ–ª–Ω–µ—á–Ω–æ–π —Ä–∞–¥–∏–∞—Ü–∏–∏
def collect_solar_radiation_data(sensor, sensor_name):
    try:
        value = sensor.read_register(0, 0)
        return value
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å {sensor_name}: {str(e)}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å –¥–∞—Ç—á–∏–∫–∞ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏
def collect_humidity_data(sensor, sensor_name):
    try:
        value = sensor.read_register(0, 1)
        return value
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å {sensor_name}: {str(e)}")
        return None

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å –¥–∞—Ç—á–∏–∫–æ–≤, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –ø–æ—á—Ç—É
# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å –¥–∞—Ç—á–∏–∫–æ–≤, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –ø–æ—á—Ç—É
def main(sensor_delay):
    global sensorTH, pyranometer
    last_sent_hour = None
    while True:
        try:
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            current_hour = datetime.now().hour

            temperature = collect_sensor_data(sensorTH, "–¥–∞—Ç—á–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã")
            solar_radiation = collect_solar_radiation_data(pyranometer, "–¥–∞—Ç—á–∏–∫ —Å–æ–ª–Ω–µ—á–Ω–æ–π —Ä–∞–¥–∏–∞—Ü–∏–∏")
            humidity = collect_humidity_data(sensorTH, "–¥–∞—Ç—á–∏–∫ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏")

            if temperature is not None and solar_radiation is not None:
                logging.info(f"–¢–µ–∫—É—â–∏–π —á–∞—Å: {current_hour}, –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}¬∞C, –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%, –°–æ–ª–Ω–µ—á–Ω–æ–µ –∏–∑–ª—É—á–µ–Ω–∏–µ: {solar_radiation} W/m¬≤")

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ CSV —Ñ–∞–π–ª
                data_to_save = [timestamp, temperature, humidity, solar_radiation]
                csv_filename = f"sensor_data_{timestamp.split()[0]}.csv"
                csv_file_path = os.path.join(DATA_PATH, csv_filename)
                save_data_to_csv(data_to_save, csv_file_path)
        except Exception as e:
            error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
            logging.error(error_message)

        finally:
            sensorTH.clear_buffers_before_each_transaction = True
            pyranometer.clear_buffers_before_each_transaction = True
            sensorTH.clear_buffers_before_each_transaction = True
            time.sleep(sensor_delay)
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
def send_notification(subject, message):
    try:
        for user_id in ALLOWED_USERS:
            bot.send_message(user_id, f"{subject} {message}")
        logging.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}"
        logging.error(error_message)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TELEGRAM_CONFIG['token'])

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    condition_button = types.KeyboardButton("üå°Ô∏è –ü–æ–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–æ–≤")
    data_button = types.KeyboardButton("üìä –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
    status_button = types.KeyboardButton("üìà –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
    openvpn_button = types.KeyboardButton("üîí –ó–∞–ø—É—Å—Ç–∏—Ç—å VPN")
    vnc_button = types.KeyboardButton("üñ•Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å VNC")
    ip_button = types.KeyboardButton("üåê –ü–æ–ª—É—á–∏—Ç—å IP")

    markup.row(condition_button, data_button, status_button)
    markup.row(openvpn_button, vnc_button, ip_button)

    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –¥–∞—Ç—á–∏–∫–æ–≤—ã–π –±–æ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(commands=['help'])
def help_command(message):
    help_text = """
       –≠—Ç–æ —Å–ø—Ä–∞–≤–∫–∞:
       üå°Ô∏è /condition - –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–æ–≤
       üìä /getdata - –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV
       üìà /status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
       üîí /openvpn - –∑–∞–ø—É—Å—Ç–∏—Ç—å VPN
       üñ•Ô∏è /vnc - –∑–∞–ø—É—Å—Ç–∏—Ç—å VNC
       üåê /ip - –ø–æ–ª—É—á–∏—Ç—å IP
       üîÑ /restartpi - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Raspberry Pi

       –ü—Ä–∏–º–µ—Ä—ã –≤–≤–æ–¥–∞ –¥–∞—Ç:
       üìä /getdata 20231010
       üìä /getdata 20231010 - 20231011
       """
    bot.reply_to(message, help_text)

@bot.message_handler(commands=['getdata'])
def get_data(message):
    user_request = message.text.split()[1:]
    if not user_request:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. ‚è≥")
        return

    if user_request[0] == "all":
        for file_name in os.listdir(DATA_PATH):
            file_path = os.path.join(DATA_PATH, file_name)
            with open(file_path, 'rb') as file:
                bot.send_document(message.chat.id, file)
        return

    date_format = dateparser.parse(user_request[0])

    if date_format:
        for file_name in os.listdir(DATA_PATH):
            file_timestamp = datetime.strptime(file_name.split("_")[0], "%Y%m%d")
            if file_timestamp.date() == date_format.date():
                file_path = os.path.join(DATA_PATH, file_name)
                with open(file_path, 'rb') as file:
                    bot.send_document(message.chat.id, file)
        return

    if len(user_request) == 1:
        bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã. ‚ö†Ô∏è")
    else:
        start_date_format = dateparser.parse(user_request[0])
        end_date_format = dateparser.parse(user_request[1])

        if start_date_format and end_date_format:
            for file_name in os.listdir(DATA_PATH):
                file_timestamp = datetime.strptime(file_name.split("_")[0], "%Y%m%d")
                if start_date_format.date() <= file_timestamp.date() <= end_date_format.date():
                    file_path = os.path.join(DATA_PATH, file_name)
                    with open(file_path, 'rb') as file:
                        bot.send_document(message.chat.id, file)
            return

        bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. ‚ö†Ô∏è")

@bot.message_handler(commands=['condition'])
def get_condition(message):
    try:
        temperature = collect_sensor_data(sensorTH, "–¥–∞—Ç—á–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã")
        solar_radiation = collect_solar_radiation_data(pyranometer, "–¥–∞—Ç—á–∏–∫ —Å–æ–ª–Ω–µ—á–Ω–æ–π —Ä–∞–¥–∏–∞—Ü–∏–∏")
        humidity = collect_sensor_data(sensorTH, "–¥–∞—Ç—á–∏–∫ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏")

        if temperature is not None and solar_radiation is not None:
            bot.reply_to(
                message, f"üå°Ô∏è –¢–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}¬∞C, –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%,  –°–æ–ª–Ω–µ—á–Ω–æ–µ –∏–∑–ª—É—á–µ–Ω–∏–µ: {solar_radiation} W/m¬≤"
            )
        else:
            bot.reply_to(message, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ö†Ô∏è")
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)} ‚ö†Ô∏è")

@bot.message_handler(commands=['status'])
def get_status(message):
    global last_sent_timestamp, last_high_temperature_notification_sent, last_low_temperature_notification_sent
    status_message = "–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: ‚úÖ –í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ. –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç."

    if last_sent_timestamp:
        status_message += f"\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø–æ—á—Ç—É: {last_sent_timestamp}."
    else:
        status_message += "\n–î–∞–Ω–Ω—ã–µ –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏—Å—å –Ω–∞ –ø–æ—á—Ç—É."

    if (
        last_high_temperature_notification_sent
        and datetime.now() - last_high_temperature_notification_sent < timedelta(hours=NOTIFICATION_CONFIG['notification_interval_hours'])
    ):
        status_message += f"\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã—Å–æ–∫–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {last_high_temperature_notification_sent}."

    if (
        last_low_temperature_notification_sent
        and datetime.now() - last_low_temperature_notification_sent < timedelta(hours=NOTIFICATION_CONFIG['notification_interval_hours'])
    ):
        status_message += f"\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∏–∑–∫–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {last_low_temperature_notification_sent}."

    bot.reply_to(message, status_message)

@bot.message_handler(commands=['openvpn'])
def run_openvpn_command(message):
    threading.Thread(target=run_openvpn).start()
    bot.reply_to(message, "–ó–∞–ø—É—â–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VPN. –û–∂–∏–¥–∞–π—Ç–µ... üîí")

@bot.message_handler(commands=['ip'])
def get_ip_command(message):
    if message.from_user.id in ALLOWED_USERS:
        ip_address = get_current_ip()
        bot.reply_to(message, f"–¢–µ–∫—É—â–∏–π IP-–∞–¥—Ä–µ—Å: {ip_address} üåê")
    else:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
@bot.message_handler(commands=['getip'])
def get_ip_command(message):
    if message.from_user.id in ALLOWED_USERS:
        ip_address = get_current_ip()
        bot.reply_to(message, f"–¢–µ–∫—É—â–∏–π IP-–∞–¥—Ä–µ—Å: {ip_address} üåê")
    else:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
@bot.message_handler(commands=['openvpn'])
def run_openvpn_command(message):
    if message.from_user.id in ALLOWED_USERS:
        threading.Thread(target=run_openvpn).start()
        bot.reply_to(message, "–ó–∞–ø—É—â–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VPN. –û–∂–∏–¥–∞–π—Ç–µ... üîí")
    else:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

@bot.message_handler(commands=['vnc'])
def run_vnc_command(message):
    if message.from_user.id in ALLOWED_USERS:
        threading.Thread(target=run_realvnc_and_send_ip, args=(message,)).start()
    else:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
@bot.message_handler(commands=['restartpi'])
def restart_raspberry_pi(message):
    if message.from_user.id in ALLOWED_USERS:
        os.system("sudo reboot")
        bot.reply_to(message, "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Raspberry Pi –∑–∞–ø—É—â–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    else:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Raspberry Pi.")

def run_realvnc_and_send_ip(message):
    try:
        command = REALVNC_CONFIG['command']
        process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE,
                                   universal_newlines=True)

        # –ó–∞–≤–µ–¥–µ–º —Ñ–ª–∞–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –±—ã–ª –ª–∏ IP-–∞–¥—Ä–µ—Å –Ω–∞–π–¥–µ–Ω
        ip_found = False

        # –°—é–¥–∞ –±—É–¥–µ–º –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤—Å–µ –≤—ã–≤–æ–¥—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        full_output = ""

        # –ñ–¥–µ–º, –ø–æ–∫–∞ RealVNC Server –≤—ã–¥–∞—Å—Ç IP-–∞–¥—Ä–µ—Å –∏ –ø–æ—Ä—Ç
        for line in process.stdout:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            full_output += line

            if "New desktop is" in line:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º IP-–∞–¥—Ä–µ—Å –∏ –ø–æ—Ä—Ç –∏–∑ —Å—Ç—Ä–æ–∫–∏
                parts = line.strip().split()
                if len(parts) >= 3:
                    ip_address = parts[-1]
                    ip_found = True
                    break

        if ip_found:
            bot.send_message(message.chat.id, f"RealVNC Server –∑–∞–ø—É—â–µ–Ω. IP-–∞–¥—Ä–µ—Å –∏ –ø–æ—Ä—Ç: {ip_address}")
        else:
            bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å IP-–∞–¥—Ä–µ—Å –∏–∑ RealVNC Server.")

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –≤—ã–≤–æ–¥ –≤ –ª–æ–≥
        logging.info("–ü–æ–ª–Ω—ã–π –≤—ã–≤–æ–¥ RealVNC Server:\n" + full_output)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ RealVNC Server: {e}")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ RealVNC Server: {e}")
def run_realvnc():
    try:
        command = REALVNC_CONFIG['command']
        process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)

        # –ñ–¥–µ–º, –ø–æ–∫–∞ RealVNC Server –≤—ã–¥–∞—Å—Ç IP-–∞–¥—Ä–µ—Å –∏ –ø–æ—Ä—Ç
        ip_address = None
        for line in process.stdout:
            if "New desktop is" in line:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º IP-–∞–¥—Ä–µ—Å –∏ –ø–æ—Ä—Ç –∏–∑ —Å—Ç—Ä–æ–∫–∏
                parts = line.strip().split()
                if len(parts) >= 3:
                    ip_address = parts[-1]

        if ip_address:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º IP-–∞–¥—Ä–µ—Å –∏ –ø–æ—Ä—Ç –≤ Telegram
            bot.send_message(TELEGRAM_CONFIG['your_chat_id'], f"RealVNC Server –∑–∞–ø—É—â–µ–Ω. IP-–∞–¥—Ä–µ—Å –∏ –ø–æ—Ä—Ç: {ip_address}")
        else:
            logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å IP-–∞–¥—Ä–µ—Å –∏–∑ RealVNC Server.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ RealVNC Server: {e}")

def run_openvpn():
    try:
        command = OPENVPN_CONFIG['command']
        process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE,
                                   universal_newlines=True)

        output, _ = process.communicate()

        if process.returncode == 0:
            logging.info("OpenVPN —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.")
        else:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ OpenVPN. –û—à–∏–±–∫–∞: {output}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ OpenVPN: {e}")
def get_current_ip():
    try:
        # –ü–æ–ª—É—á–∞–µ–º IP-–∞–¥—Ä–µ—Å —Ö–æ—Å—Ç–∞
        host_name = socket.gethostname()
        host_ip = socket.gethostbyname(host_name)
        return host_ip
    except Exception as e:
        return str(e)

def run_bot():
    while True:
        try:
            bot.polling(none_stop=True)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å Telegram –±–æ—Ç–æ–º: {e}")
            time.sleep(10)

if __name__ == "__main__":
    threading.Thread(target=main, args=(SENSOR_TH_CONFIG['delay'],)).start()
    threading.Thread(target=run_bot).start()
